/*!
 * @author yomotsu / http://yomotsu.net/
 */
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var r;r="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,r.GhostMaterial=e()}}(function(){return function e(r,a,n){function t(h,i){if(!a[h]){if(!r[h]){var f="function"==typeof require&&require;if(!i&&f)return f(h,!0);if(o)return o(h,!0);var u=new Error("Cannot find module '"+h+"'");throw u.code="MODULE_NOT_FOUND",u}var s=a[h]={exports:{}};r[h][0].call(s.exports,function(e){var a=r[h][1][e];return t(a?a:e)},s,s.exports,e,r,a,n)}return a[h].exports}for(var o="function"==typeof require&&require,h=0;h<n.length;h++)t(n[h]);return t}({1:[function(e,r,a){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}a.__esModule=!0;var t=e("./extendPhong.js"),o=n(t),h={unifroms:{},vsHeader:["varying float vAlpha;"].join("\n"),vsAfter:["vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );","vec3 viewVec = worldPosition.xyz - cameraPosition;","float B = dot( - normalize( viewVec ), normalize( worldNormal ) );","vAlpha = pow( 1. - B, 3.0 ) + 0.1;"].join("\n"),fsHeader:["varying float vAlpha;"].join("\n"),fsAfter:["gl_FragColor.w = vAlpha;"].join("\n")},i=function(e){var r=(0,o["default"])(h,e);THREE.ShaderMaterial.call(this,r),this.fog=!0,this.lights=!0,this.transparent=!0,this.blending=THREE.AdditiveBlending};i.prototype=Object.create(THREE.ShaderMaterial.prototype),a["default"]=i,r.exports=a["default"]},{"./extendPhong.js":2}],2:[function(e,r,a){"use strict";a.__esModule=!0,a["default"]=function(e,r){var a=THREE.UniformsUtils.merge([THREE.ShaderLib.phong.uniforms,e.unifroms||""]),n=["#define PHONG","varying vec3 vViewPosition;","#ifndef FLAT_SHADED"," varying vec3 vNormal;","#endif",THREE.ShaderChunk.common,THREE.ShaderChunk.uv_pars_vertex,THREE.ShaderChunk.uv2_pars_vertex,THREE.ShaderChunk.displacementmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.lights_phong_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,e.vsHeader||"","void main() {",THREE.ShaderChunk.uv_vertex,THREE.ShaderChunk.uv2_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.beginnormal_vertex,THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,"#ifndef FLAT_SHADED"," vNormal = normalize( transformedNormal );","#endif",THREE.ShaderChunk.begin_vertex,THREE.ShaderChunk.displacementmap_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.project_vertex,THREE.ShaderChunk.logdepthbuf_vertex," vViewPosition = - mvPosition.xyz;",THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.lights_phong_vertex,THREE.ShaderChunk.shadowmap_vertex,e.vsAfter||"","}"].join("\n"),t=["#define PHONG","uniform vec3 diffuse;","uniform vec3 emissive;","uniform vec3 specular;","uniform float shininess;","uniform float opacity;",THREE.ShaderChunk.common,THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.uv_pars_fragment,THREE.ShaderChunk.uv2_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.alphamap_pars_fragment,THREE.ShaderChunk.aomap_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.emissivemap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.bsdfs,THREE.ShaderChunk.ambient_pars,THREE.ShaderChunk.lights_pars,THREE.ShaderChunk.lights_phong_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.bumpmap_pars_fragment,THREE.ShaderChunk.normalmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,THREE.ShaderChunk.logdepthbuf_pars_fragment,e.fsHeader||"","void main() {"," vec4 diffuseColor = vec4( diffuse, opacity );"," ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );"," vec3 totalEmissiveLight = emissive;",THREE.ShaderChunk.logdepthbuf_fragment,THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.alphamap_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,THREE.ShaderChunk.normal_fragment,THREE.ShaderChunk.emissivemap_fragment,THREE.ShaderChunk.lights_phong_fragment,THREE.ShaderChunk.lights_template,THREE.ShaderChunk.aomap_fragment,"vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveLight;",THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment," gl_FragColor = vec4( outgoingLight, diffuseColor.a );",e.fsAfter||"","}"].join("\n"),o={vertexShader:n,fragmentShader:t,uniforms:THREE.UniformsUtils.clone(a),defines:{},extensions:{}};return r&&(r.color&&o.uniforms.diffuse.value.setHex(r.color),r.map&&(o.uniforms.map.value=r.map,o.defines.USE_MAP="",o.uniforms.offsetRepeat.value.setZ(r.map.repeat.x),o.uniforms.offsetRepeat.value.setW(r.map.repeat.y)),r.normalMap&&(o.uniforms.normalMap.value=r.normalMap,o.defines.USE_NORMALMAP="",o.extensions.derivatives=!0,o.uniforms.offsetRepeat.value.setZ(r.normalMap.repeat.x),o.uniforms.offsetRepeat.value.setW(r.normalMap.repeat.y)),r.normalScale&&o.uniforms.normalScale.value.copy(r.normalScale)),o},r.exports=a["default"]},{}]},{},[1])(1)});